#!/usr/bin/env perl
###########################################################################
#
#   Copyright 2013 American Public Media Group
#
#   This file is part of AIR2.
#
#   AIR2 is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   AIR2 is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with AIR2.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

use strict;
use warnings;
use Carp;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use Getopt::Long;
use Pod::Usage;
use Rose::DateTime::Parser;
use AIR2::WelcomeEmail;
use AIR2::Config;

=pod

=head1 NAME

send-welcome-emails - send welcome email to Sources who have been opted-in to an Organization

=head1 SYNOPSIS

 send-welcome-emails [opts] [--since 'yyyy-mm-dd hh:mm:ss']

=head1 DESCRIPTION

Checks the database for which new Sources need a welcome email and sends it. 

=head1 OPTIONS

=head2 since I<date>

Limit the search to Sources created since I<date>. 

=head2 log_activity

Create a sact_activity record for each email sent.

=head2 test I<newsroom>

Will send the welcome email for I<newsroom> to every email address supplied
as argument to the script. Example:

 % perl bin/send-welcome-emails --test mpr you@mpr.org

=cut

my $WELCOME_SENT_ACTM_ID = 18;
my ($help, $debug,  $dry_run,      $since,
    $test, $LOCALE, $log_activity, $FROM,
    $TO,   $last_run_file,
);
$last_run_file
    = AIR2::Config->get_app_root->file('var/send-welcome-email-last-run');
GetOptions(
    help            => \$help,
    debug           => \$debug,
    'dry_run=i',    => \$dry_run,
    'since=s'       => \$since,
    'test=s'        => \$test,
    'locale=s'      => \$LOCALE,
    'log_activity'  => \$log_activity,
    'from=s'        => \$FROM,
    'to=s'          => \$TO,
    'last_run_file' => \$last_run_file,
) or pod2usage(2);

if ($help) {
    pod2usage(2);
}

# default variables
$debug = 0 unless defined $debug;

$Rose::DB::Object::Manager::Debug = $debug;
$Rose::DB::Object::Debug          = $debug;

if ($test) {

    # just send mail for $test newsroom to any email in @ARGV
    for my $addr (@ARGV) {
        my $org = AIR2::Organization->new( org_name => $test )->load;

        # if org has org_suppress_welcome_email_flag==1, skip it
        if ( $org->org_suppress_welcome_email_flag ) {
            warn "Org $test has org_suppress_welcome_email_flag==1\n";
            next;
        }

        # redmine 8249 apmpin disguises global org
        if ( $org->org_id == AIR2::Config::get_global_pin_org_id() ) {
            $org = AIR2::Organization->new(
                org_id => AIR2::Config::get_apmpin_org_id() )->load;
        }
        my $src_email = AIR2::SrcEmail->new( sem_email => $addr )->load;
        my $welcome = AIR2::WelcomeEmail->new(
            source       => $src_email->source,
            org          => $org,
            debug        => $debug,
            dry_run      => $dry_run,
            locale       => $LOCALE,
            from         => $FROM,
            to           => $TO,
            log_activity => $log_activity,
        );
        $welcome->send();
    }

    exit();
}

# parse any supplied timeframe
my $updated_since;
my $this_tz = AIR2::Config->get_tz();
my $date_parser = Rose::DateTime::Parser->new( time_zone => $this_tz );
if ($since) {
    $updated_since = $date_parser->parse_date($since)
        or die "invalid date $since";
}
elsif ( -s $last_run_file ) {
    $debug and warn "last run: " . $last_run_file->slurp() . "\n";
    $updated_since = $date_parser->parse_date( $last_run_file->stat->mtime );
}
else {
    my $now = DateTime->now()->set_time_zone($this_tz);
    $updated_since = $now->subtract( seconds => 15 * 60 );    # 15 minutes
}

$debug and warn "Considering sources with activity since $updated_since\n";

# mark our start time, for next time
$last_run_file->spew( scalar localtime() );

# cache all orgs
my $org_cache = AIR2::SearchUtils::all_organizations_by_id();

# find affected sources and which orgs
my $sos = AIR2::SrcOrg->fetch_all_iterator(
    query => [
        so_cre_dtim  => { ge => $updated_since },
        so_status    => 'A',
        so_home_flag => 1,
    ],
    require_objects => [qw( source )],
    sort_by         => 'so_cre_dtim ASC',
);

my %seen_sources = ();
SRCORG: while ( my $so = $sos->next ) {

    my $source = $so->source;
    my $org    = $org_cache->{ $so->so_org_id };

    # redmine #10011
    if ( $org->org_suppress_welcome_email_flag ) {
        $debug
            and warn sprintf( "Org %s has org_suppress_welcome_email_flag==1",
            $org->org_name );
        next SRCORG;
    }

    # redmine 8249 apmpin disguises global org
    if ( $org->org_id == AIR2::Config::get_global_pin_org_id() ) {
        $org = $org_cache->{ AIR2::Config::get_apmpin_org_id() };
    }

    # skip any sources we've already seen in this run (could this happen?)
    next SRCORG if $seen_sources{ $source->src_id }++;

    # skip any who have somehow already gotten a welcome email to this org
    my $welcome_sacts = $source->find_activities(
        query => [
            sact_actm_id => $AIR2::WelcomeEmail::WELCOME_SENT_ACTM_ID,
            sact_xid     => $org->org_id,
        ]
    );

    if (@$welcome_sacts) {
        $debug
            and warn
            sprintf( "Found welcome sact already for source %s in org %s\n",
            $source->src_username, $org->org_name );
        next SRCORG;
    }

    my $welcome = AIR2::WelcomeEmail->new(
        source       => $source,
        org          => $org,
        dry_run      => $dry_run,
        debug        => $debug,
        locale       => $LOCALE,
        from         => $FROM,
        to           => $TO,
        log_activity => $log_activity,
    );
    $welcome->send();
}

exit(0);

