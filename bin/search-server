#!/usr/bin/env perl
###########################################################################
#
#   Copyright 2010 American Public Media Group
#
#   This file is part of AIR2.
#
#   AIR2 is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   AIR2 is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with AIR2.  If not, see <http://www.gnu.org/licenses/>.
#
###########################################################################

#
# Manager script for AIR2 search services.
#

package AIR2::SearchServerManager;
local $| = 1;    # do not buffer stdout
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib/perl";
use AIR2::Config;
use Unix::PID::Tiny;
use IO::Socket;
use Data::Dump qw( dump );
use Path::Class;

my $search_root     = AIR2::Config->get_search_root();
my $app_root        = AIR2::Config->get_app_root();
my $this_script     = $0;
my $watcher         = $app_root->file("bin/watch-stale-records");
my $port            = AIR2::Config->get_search_port();
my $pidfile         = $app_root->file("var/search-server-${port}.pid");
my $watcher_pidfile = $app_root->file("var/watch-stale-records.pid");
my $dezi            = $^X;
$dezi =~ s/perl$/dezi/;

my $log_dir       = dir( AIR2::Config::get_constant('AIR2_LOG_DIR') );
my $logfile       = $log_dir->file("search-${port}.log");
my $error_logfile = $log_dir->file("search-${port}-error.log");
my $watcher_logfile
    = $log_dir->file("search-watch-stale-records-${port}.log");
my $patience = 10;  # willing to wait this many seconds for action to complete

my $server
    = "--server-class=AIR2::Search::MasterServer --dezi-config=$app_root/etc/dezi.config.pl ";
$server .= "  --port $port --server Starman -D --pid=$pidfile ";

$pidfile->dir->mkpath();
$logfile->dir->mkpath();

# the signals passed to the process in stop(), in the order we try them.
# NOTE that 15 (TERM) is not used because it does not always kill off forked
# child processes.
my @kill_signals = (
    1,    # HUP
    2,    # INT
    1,    # HUP
    9,    # KILL
);

my $action = shift(@ARGV);
if ( !$action ) {
    help();
    exit(0);
}

if ( __PACKAGE__->can($action) ) {
    __PACKAGE__->$action();
}
else {
    help();
    exit(1);
}

sub start {
    start_search_server();
    start_watcher();
}

sub stop {
    stop_watcher();
    stop_search_server();
}

sub force_stop {
    stop_watcher(1);
    stop_search_server(1);
}

sub check {
    check_watcher();
    check_search_server();
}

sub start_watcher {
    my $cmd
        = "nohup $^X $watcher --default --pid_file=$watcher_pidfile 1>>$watcher_logfile 2>>$watcher_logfile &";
    print "Starting $watcher ...";
    if ( -s $watcher_pidfile ) {
        print
            "Found PID file at $watcher_pidfile -- is server already running?\n";
        exit(2);
    }
    system($cmd);
    my $now = time();
    while ( !-s $watcher_pidfile ) {
        if ( time() - $now > $patience ) {
            last;
        }
        print ".";
        sleep 1;
    }
    if ( -s $watcher_pidfile ) {
        print " ok\n";
        return 1;
    }
    else {
        print " failed\n";
        return 0;
    }
}

sub stop_watcher {
    my $force = shift;
    print "Stopping $watcher ...";
    if ( !-s $watcher_pidfile ) {
        return if $force;
        print "No PID file found at $watcher_pidfile -- is server running?\n";
        exit(2);
    }
    my $pid      = `cat $watcher_pidfile`;
    my $unix_pid = Unix::PID::Tiny->new;
    my @signals  = @kill_signals;
    if ( $unix_pid->is_pid_running($pid) ) {
        mykill( $signals[0], $pid );
    }
    my $now = time();
    while ( $unix_pid->is_pid_running($pid) ) {
        mykill( shift(@signals), $pid );
        if ( time() - $now > $patience ) {
            last;
        }
        print ".";
        sleep 1;
    }
    if ( $unix_pid->is_pid_running($pid) ) {
        print " failed to kill PID $pid\n";
        exit(3) unless $force;
    }
    print " ok\n";
    unlink $watcher_pidfile;
    return 1;
}

sub start_search_server {

    # make sure we start in our app dir so INC works.
    chdir $app_root;
    my $cmd
        = "$^X -Ilib/perl $dezi $server --access-log=$logfile --error-log=$error_logfile";
    my $friendly = $cmd;
    $friendly =~ s/--/\\\n  --/g;
    print "Starting search_server: $friendly\n ...";
    if ( -s $pidfile ) {
        print "Found PID file at $pidfile -- is server already running?\n";
        exit(2);
    }
    system($cmd);
    my $now = time();
    while ( !-s $pidfile ) {
        if ( time() - $now > $patience ) {
            last;
        }
        print ".";
        sleep 1;
    }
    if ( -s $pidfile ) {
        print " ok\n";
        return 1;
    }
    else {
        print " failed\n";
        return 0;
    }
}

sub stop_search_server {
    my $force = shift;
    print "Stopping search_server ...";
    if ( !-s $pidfile ) {
        print "No PID file found at $pidfile -- is server running?\n";
        return if $force;
        exit(2);
    }
    my $pid      = `cat $pidfile`;
    my $unix_pid = Unix::PID::Tiny->new;
    my @signals  = @kill_signals;
    if ( $unix_pid->is_pid_running($pid) ) {
        mykill( $signals[0], $pid );
    }
    my $now = time();
    while ( $unix_pid->is_pid_running($pid) ) {
        mykill( shift(@signals), $pid );
        if ( time() - $now > $patience ) {
            last;
        }
        print ".";
        sleep 1;
    }
    if ( $unix_pid->is_pid_running($pid) ) {
        print " failed to kill PID $pid\n";
        exit(3) unless $force;
    }
    print " ok\n";
    unlink $pidfile;
    return 1;
}

sub restart_watcher {
    stop_watcher();
    start_watcher();
}

sub restart_server {
    stop_search_server();
    start_search_server();
}

sub restart {
    stop();
    my $max = 10;
    my $i   = 0;
    while ( port_is_open() ) {
        print "Waiting for port $port to close...\n";
        sleep 1;
        last if ( $i++ > $max );
    }
    start();
}

sub port_is_open {
    return IO::Socket::INET->new(
        PeerAddr => '127.0.0.1',
        PeerPort => $port,
        Proto    => 'tcp',
        Type     => SOCK_STREAM,
    );
}

sub check_search_server {
    chomp( my $pid = `cat $pidfile` );
    if ( !$pid ) {
        print "No search_server running (no PID at $pidfile)\n";
        return 0;
    }
    my $unix_pid = Unix::PID::Tiny->new;
    if ( $unix_pid->is_pid_running($pid) ) {
        print "Found running PID for $pid in $pidfile\n";
        return 1;
    }
    else {
        print "Found stale search_server PID file at $pidfile\n";
        return 0;
    }
}

sub check_watcher {
    chomp( my $pid = `cat $watcher_pidfile` );
    if ( !$pid ) {
        print "No watcher running (no PID at $watcher_pidfile)\n";
        return 0;
    }
    my $unix_pid = Unix::PID::Tiny->new;
    if ( $unix_pid->is_pid_running($pid) ) {
        print "Found running PID for $pid\n";
        return 1;
    }
    else {
        print "Found stale watcher PID file at $watcher_pidfile\n";
        return 0;
    }
}

sub help {
    print "$this_script [ start | stop | restart | check | help ]\n";
}

sub mykill {
    my ( $signal, $pid ) = @_;

    #print "kill -$signal $pid\n";
    #kill( $signal, $pid ) and warn "kill $signal $pid returned true";

    kill( $signal, $pid );
}

